<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.idexx.enterprise-architecture.lambda-adot-otel-poc</groupId>
    <artifactId>secondary-lambda</artifactId>
    <!-- The version gets used as part of the Lambda function name, so don't use characters AWS doesn't like, such as '.' -->
    <version>0</version>
    <packaging>jar</packaging>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- I would prefer to use Java 21, but this AWS page seems to indicate 17 is the max?
             https://aws-otel.github.io/docs/getting-started/lambda/lambda-java-auto-instr -->
        <project.java.version>17</project.java.version>
        <!-- This property is supposed to be the same as setting both source and target, but we'll set all 3 out of an abundance of caution -->
        <maven.compiler.release>${project.java.version}</maven.compiler.release>
        <maven.compiler.source>${project.java.version}</maven.compiler.source>
        <maven.compiler.target>${project.java.version}</maven.compiler.target>

        <aws.id>145612473986</aws.id>
        <aws.region>us-east-1</aws.region>
        <aws.architecture>amd64</aws.architecture>
        <!-- The exec plugin will create this bucket as part of the verify phase, if need be -->
        <aws.s3.bucket>adot-java-lambda-poc</aws.s3.bucket>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.opentelemetry.instrumentation</groupId>
                <artifactId>opentelemetry-instrumentation-bom</artifactId>
                <version>2.16.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>2.32.2</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- These dependencies recommended by AWS: https://docs.aws.amazon.com/lambda/latest/dg/lambda-java.html -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.3.0</version>
        </dependency>

        <!-- This dependency is not strictly required, but may come in handy if we want to use Events with our Lambda
             function (rather than a basic RequestStreamHandler) -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.15.0</version>
        </dependency>

        <!-- Includes SLF4J, which in turn supports OpenTelemetry -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.5.18</version>
        </dependency>

        <!-- json-friendly encoder for the logback.xml file -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>8.0</version>
        </dependency>

        <!-- version managed by BOM in dependencyManagement section -->
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-api</artifactId>
        </dependency>

        <!-- version managed by BOM in dependencyManagement section -->
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>lambda</artifactId>
        </dependency>

        <!-- For test automation -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.13.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.18.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- This plugin packages the lambda function code into a FAT JAR, as required by AWS Lambda -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <!-- These filters and exclusions appear to be (unofficially) recommended by AWS,
                         based on some of their provided examples -->
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>module-info.class</exclude>
                                <exclude>META-INF/*</exclude>
                                <exclude>META-INF/versions/**</exclude>
                                <!--exclude>META-INF/services/**</exclude-->
                            </excludes>
                        </filter>
                    </filters>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- This plugin allows us to substitute system properties from our pom file into our CloudFormation -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <id>filter-cloudformation-template</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cloudformation</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/cloudformation</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- This plugin allows us to run executables - such as the AWS CDK - to do <stuff> -->
            <plugin>
                <!-- Note: You may need to set the AWS_PROFILE env var to match the named profile you wish to use, if
                           using a non-default profile for your `aws sso login` -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.5.0</version>
                <executions>
                    <execution>
                        <id>ensure-s3-bucket-exists</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>s3</argument>
                                <argument>mb</argument>
                                <argument>s3://${aws.s3.bucket}</argument>
                                <argument>--region</argument>
                                <argument>${aws.region}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- copies our packaged JAR to S3, so that it can be used by the CloudFormation template -->
                    <execution>
                        <id>upload-lambda-jar</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>s3</argument>
                                <argument>cp</argument>
                                <argument>${project.build.directory}/${project.artifactId}-${project.version}.jar</argument>
                                <argument>s3://${aws.s3.bucket}/${project.artifactId}-${project.version}.jar</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- deploys the CloudFormation template, which creates the Lambda function -->
                    <execution>
                        <id>deploy-cloudformation</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>cloudformation</argument>
                                <argument>deploy</argument>
                                <argument>--template-file</argument>
                                <argument>${project.build.directory}\cloudformation\template.yaml</argument>
                                <argument>--stack-name</argument>
                                <argument>lambda-adot-otel-poc-${project.artifactId}</argument>
                                <argument>--capabilities</argument>
                                <argument>CAPABILITY_IAM</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- This is an extra step to ensure the Lambda code gets updated, even if CloudFormation doesn't
                         think it needs to (for cases when the code changes but not the version or template) -->
                    <execution>
                        <id>ensure-lambda-code-update</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>lambda</argument>
                                <argument>update-function-code</argument>
                                <argument>--function-name</argument>
                                <argument>${project.artifactId}-${project.version}</argument>
                                <argument>--s3-bucket</argument>
                                <argument>${aws.s3.bucket}</argument>
                                <argument>--s3-key</argument>
                                <argument>${project.artifactId}-${project.version}.jar</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>