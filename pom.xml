<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.idexx.enterprise-architecture</groupId>
    <artifactId>adot-lambda-poc</artifactId>
    <!-- The version gets used as part of the Lambda function name, so don't use characters AWS doesn't like, such as '.' -->
    <version>1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <java.version>21</java.version>
        <!-- This property is supposed to be the same as setting both source and target, but we'll set all 3 out of an abundance of caution -->
        <maven.compiler.release>${java.version}</maven.compiler.release>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <aws.id>145612473986</aws.id>
        <aws.region>us-east-1</aws.region>
        <aws.architecture>amd64</aws.architecture>
        <!-- Manually created this bucket for the POC, but it could be programmatically created if needed -->
        <aws.s3.bucket>adot-java-lambda-poc</aws.s3.bucket>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- We use the BOM to simplify imports of specific components within the overall SDK -->
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>2.31.62</version>
                <type>pom</type>
                <scope>runtime</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- These dependencies recommended by AWS: https://docs.aws.amazon.com/lambda/latest/dg/lambda-java.html -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.3.0</version>
        </dependency>
        <!-- This dependency is not strictly required, but may come in handy if we want to use Events with our Lambda
             function (rather than a basic RequestStreamHandler) -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.15.0</version>
        </dependency>

        <!-- Includes SLF4J, which in turn supports OpenTelemetry -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.5.18</version>
        </dependency>

        <!-- For test automation -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.13.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.18.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- This plugin packages the lambda function code into a FAT JAR, as required by AWS Lambda -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <!-- Not sure how useful or required these filters are -->
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <!--exclude>module-info.class</exclude-->
                                <exclude>META-INF/**</exclude>
                                <!--exclude>META-INF/versions/**</exclude>
                                <exclude>META-INF/services/**</exclude-->
                            </excludes>
                        </filter>
                    </filters>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- This plugin allows us to substitute system properties from our pom file into our CloudFormation -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <id>filter-cloudformation-template</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cloudformation</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/cloudformation</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- This plugin allows us to run executables - such as the AWS CDK - to do <stuff> -->
            <plugin>
                <!-- Note: You may need to set the AWS_PROFILE env var to match the named profile you wish to use, if
                           using a non-default profile for your `aws sso login` -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.5.0</version>
                <executions>
                    <!-- copies our packaged JAR to S3, so that it can be used by the CloudFormation template -->
                    <execution>
                        <id>upload-lambda-jar</id>
                        <phase>verify</phase>
                        <goals><goal>exec</goal></goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>s3</argument>
                                <argument>cp</argument>
                                <argument>${project.build.directory}/${project.artifactId}-${project.version}.jar</argument>
                                <argument>s3://${aws.s3.bucket}/${project.artifactId}-${project.version}.jar</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- deploys the CloudFormation template, which creates the Lambda function -->
                    <execution>
                        <id>deploy-cloudformation</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>cloudformation</argument>
                                <argument>deploy</argument>
                                <argument>--template-file</argument>
                                <argument>${project.build.directory}\cloudformation\template.yaml</argument>
                                <argument>--stack-name</argument>
                                <argument>${project.artifactId}</argument>
                                <argument>--capabilities</argument>
                                <argument>CAPABILITY_IAM</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>